###
Variables and Variable Declarations
All variables are immutable by default
To make a variable mutable, add the `mutable` keyword after `define`
`define` is first when declaring any new varable, `mutable` is an optional keyword but must come immediately after `define`
###

# Primitive types
define age: number = 41
define isTrue: bool = true
define name: string = "Brandon"

define mutable status: string = "active"

# All variable value re-assignment requires the `set` keyword
set name = "Brando" # invalid, not mutable
set status = "inactive" # all good!

# Functions (all functions are first-class functions; no function declarations)
# Because the type is declared when the function is created, no need to specify the type after the name
define greet = (a: number, n: string): string {
  return "Hello, #{n}! You are #{a} years old."
}

greet(41, "Brandon") # "Hello, Brandon! You are 41 years old."

# just does stuff, no return value
define log = (message: string): nothing {
  print(message)
}

define oops = (): nothing {
  return 42 # invalid, cannot return a value from a `nothing` function
}

# Default parameters
define log = (message: string else "hello"): nothing {
  print(message)
}

# Default parameters with a union
define log = (message: (number or string) else "Hello"): nothing {
  print(message);
}

# Closures
define outer = (n: number): (number) >> number {
  define original: number = n
  
  define inner = (x: number): number {
    return original + x
  }

  return inner
}

log("Yo!") # => "Yo!"
log(42) # => 42
log() # => "Hello"

# Custom returns
define getCoords = (): (number, number) {
  return (10, 20)
}

# Lists
define numbers: [number] = [1, 2, 3]
define users: [User] = [{}, {}, {}] 
define whatever: [?] = [1, "Brandon", true]
define union: [number or string] = [1, "Brandon"]

# Maps
# Maps use string keys by default, so the key type is omitted but still allowed
define map: {string} = {
  name: "Brandon"
}

# Values could be anything
define map: {?} = {
  name: "Brandon"
}

# Values could be multiple types
define map: {bool or number or string} = {
  name: "Brandon"
}

# Tuples
define coords: (number, number) = (10, 20)
define coords: (x: number, y: number) = (0, 1)
# coords.x = 0
# coords.y = 1

# Shapes
shape User = {
  age: Number,
  name: String
}

# Using the shape
define user: User = {
  age: 41,
  name: "Brandon"
}

# Alternatively
define user: { age: number, name: string } = {
  age: 41,
  name: "Brandon"
}

# Optional properties in shapes
shape User = {
  id: number,
  name: string,
  profile: optional { # `profile` is optional
    username: string, # `username` is required and must be a string if `profile` exists
    website: optional string # `website` is optional
  }
}
define user: User = {
  id: 1,
  name: "Brandon"
}

# Accessing an optional property
# `with` is used for safe optional chaining with fallback for assignment expressions
# Don't use `with` in conditionals
define username: string = user with profile with username else user.name # if no, default to "Brandon"
define username: string = user with profile with username else "No Username" # if no, default to "No Username"
define username: maybe string = user with profile with username # safe because `username` is optional

###
Lists
###

define list: [number] = [1, 2, 3]
define list: [?] = [1, "2", true, {}]

# Accessing data
# Zero-based indexing
list[0] # = 1

# Because a value at a particular index could be `absent`, best practice to provide fallbacks
define first: number = list[0] else 0

define last: maybe number = last of list # must be `maybe` without a fallback
define last: number = last of list else 0
define listLength: number = length of list

define updatedList: [number] = extend list with 4 # [1, 2, 3, 4]
define updatedList: [number] = extend list with [4, 5] # [1, 2, 3, 4, 5]
define updatedList: [number] = insert 4 at 1 into list # [1, 4, 2, 3]
define updatedList: [number] = insert [4, 5] at 1 into list # [1, 4, 5, 2, 3]
define updatedList: [number] = remove at 2 from list # [1, 2]
# an index outside the bounds just returns the existing array

set list[0] = 10 # [10, 2, 3]

###
If/Else
###

define x: number = 12
if x < 10 {
  print(x)
} else {
  print("x > 10")
}

define isAdmin: bool = true
if isAdmin {
  # do something
}

if x equals 12 {
  # do something
}

if username equals "Brando" {
  # do something
}

# Type checks
# Type checking is structural
# Type checks check for presence and type
if x is number {
  # do something
}

shape User = {
  id: number,
  name: string
}
define user: User = {
  id: 1,
  name: "Brandon"
}

if user is User {
  # do something
}

define mapUser: {?} = {
  name: "Brandon"
}

if mapUser["name"] is string as name {
  print("name = #{name}")
}

# Presence/checking
# Since some things can return `absent`
define user: {string} = {
  name: "Brandon"
}

if user["name"] is present {
  # do something
}

if user["name"] is absent {
  # do something
}

# Negation
# Use `not` as a prefix keyword
if not user is User {
  # do something
}

if not isAdmin {
  # do something
}

if not x equals 12 {
  # do something
}

# Casting value to a variable
# Casting only allowed on items with a previously declared type
if user.name is present as username {
  print(username) # username = user.name; user.name already explicitly typed
}

# Chained checks
# `and`/`or`
if (user.profile is present as p and p.role is string and p.role equals "admin") {
  # do something
}

if (x < 5 or x > 10) {
  # do something
}

# Assignment from `if`
define username: string = if user.profile is present as p and p.username is present then p.username else "Anonymous"

###
Shape types (shapes)
Instances must be `mutable` to change any value
###
shape User = {
  id: number,
  name: string
}

define user: User = {
  id: 1,
  name: "Brandon"
}
set user.name = "Brando" # invalid, not mutable

define mutable user: User = {
  id: 1,
  name: "Brando"
}
set user.name = "Brando" # valid

# Open shapes
open shape User = {
  id: number,
  name: string,
  ...: ? # unknown
  # ...: String
  # ...: Bool or String
  # ...: [Number]
  # ...: {String}
}
# If there is no declared `...` then an `open` shape defaults to `...: ?`

print(user.name) # safe, statically defined
print(user.whatever) # unsafe

# Optional fields
shape User = {
  id: number,
  name: string,
  status: optional ("active" or "inactive"), # `status` is optional, but if present can only be in the union
  profile: optional { # `profile` is optional
    username: string, # `username` is required if `profile`
    url: optional string # `url` is optional
  }
}

###
Maps
By default, keys are strings so it can be left off in declaration ({string, string})
###

# A map where all values are strings
define user: {string} = {
  id: "1"
}

# A map of unknown values
define user: {?} = {
  whatever: "whatever"
}

# This applies to any type, whether defined (e.g. User, [number], {?}), or a single type or multiple (e.g. {bool or string})

# Fetching data
# Because maps are dynamic, all fetched values need a presence check (`is` or `has`, or `with`)
define name: maybe string = user["name"]
if name is string {
  # do something
}

# `maybe` flag is required if no fallback provided
define name: string = user with "name" else "No Name"

if user has "name" {
  # do something
}

define name: string = user with "name" else "Brandon" # safely traverse and assign a fallback
# with is only for assignment, not for logic checks

define name: string = user["name"] # invalid, must be `maybe string` or a fallback

###
Loops
###

define x: number = 0
while x < 5 do
  print(x)
  set x = x + 1
end  

# Lists
define numbers: [number] = [1, 2, 3]
each n in numbers do
  print(n)
end

each (i, n) in numbers do
  print("#{i}: #{n}")
end
# i is implicitly a number, type of n is known from when `numbers` was defined

define whatever [?] = [1, "2", true]
each w: ? in whatever do
  if w is number as n {
    print("number: #{n}")
  } else if w is string as s {
    print("string: #{s}")
  } else {
    print("other: #{w}")
  }
end

# Maps
define user: {string} = {
  id: "1",
  name: "Brandon"
}

each (key, value) in user do # key is implicity of type string, value was statically typed as string
  print("#{key} = #{value}")
end

each (_, value) in user do # ignore key with `_`
  # do something
end

# Shapes
each (field, value) in user do
  print("#{field}: #{value}")
end

# Additionally, you can loop over defined/extra fields on open shapes specifically
each defined (field, value) in user do
  # do smething
end

each extra (field, value: ?) in user do # type must be declared as ? or whatever it was set to in the shape
  # do something
end

# Skip/stop
each n in numbers do
  if n equals 3 {
    stop  # stop loop early
  }
  if n mod 2 equals 0 {
    skip  # skip even numbers before 3
  }
  print(n)  # prints: 1, then stops at 3
end

# Ranges

# Inclusive
each i from 0 to 5 do
  print(i)
end

# Exclusive
each i from 0 until 5 do
  print(i)
end

###
Destructuring
###

# Tuples
define coords: (number, number) = (10, 20)
define (x, y) = coords
print(x) # 10
print(y) # 20

# Maps
define settings: {?} = {
  fontSize: 14,
  theme: "light"
}

define { fontSize as size: string else 12, theme: string else "dark" } = settings

print(theme) # "light"... would equal "dark" if `theme` didn't exist or wasn't a string
print(size) # 14... would equal 12 if `fontSize` didn't exist or wasn't a number

# Shapes
shape User = {
  id: number,
  name: string,
  status: optional ("active" or "inactive")
}

define user: User = {
  id: 42,
  name: "Brandon"
}

define { id as userId, name, status else "inactive" } = user

print(userId) # 42
print(status) # "inactive" (default used since missing)

shape User = {
  id: number,
  name: string,
  email: optional string,
  status: optional string
}

shape PartialUser = Omit(User, ["id"])

define mutable user: User = {
  id: 1,
  name: "Alice"
  # status and email are missing here, which is valid
}

define { id, &remaining: PartialUser } = user # `remaining` is a variable name, could be `rest` or whatever

print(id)         # 1
print(remaining)  # { name: "Alice", status: absent, email: absent }

# Accessing optional fields safely
if remaining.status is present {
  print(remaining.status)
}

print(remaining.email else "hello@example.com")

# Lists
# List require a type annotation
define list: [number] = [10]
define [x: maybe number, y: maybe number, &remaining] = list
# x = 10
# y = `absent`
# `remaining` = []

define [x: number else 0, y: number else 0] = list

###
Error Handling
BrandoScript does not support `throw`. Errors must be handled via the built-in `Result` type
###
type Result of (O, E) =
  Ok { data: O }
  or Error { error: E }

define divide = (a: number, b: number): Result of (number, string) {
  if b equals 0 {
    return Error { error: "Cannot divide by zero" }
  }
  return Ok { data: a / b }
}

###
Types
###
type MapFn = (number) >> number
define transform = (n: number, fn: MapFn): number {
  # do something
}

type Thing = bool or number or string
define listOfThings: Thing = []

###
Given
The `given` expression lets you examine a value and execute code based on which pattern it matches. It's ideal for working with tagged unions, shapes, literals, and more, providing clear, concise, and expressive control flow.
given <value> {
  is <Type> then { ... }
  matches { key: Type else fallback, ... }
  equals <literal> then { ... }
}
###

###
Importing/Exporting
Applies to types, values, functions — anything defined.
###

# Exporting
export shape User = {
  id: number,
  name: string
}

export define getUser = (id: number): User {
  return { id: id, name: "Brando" }
}

# Importing
import User, getUser from "./user"
import all from "./user"
import getUser as fetchUser from "./user"
import length, print from std
import print as log from std

###
Type Aliases and Composition
###

# Built-in `Result` type
# BS supports generic types

# Base shape
shape Base = {
  id: number,
  createdAt: string
}

# User composed with Base
shape User = shape from Base with {
  name: string
}

# Admin composed with User
shape Admin = shape from User with {
  permissions: [string]
}

shape Timestamped = {
  createdAt: string,
  updatedAt: optional string
}

shape Post = shape from [Base, Timestamped] with {
  body: string,
  title: string
}

# If `with` leads to a conflict (same key with different types) it leads to a compilation error
# Any shape from an `open shape` will by default be open

###
Try / Else
###
define eventual fetchUser = (id: number): Result of (User, string) {
  # do API call
}

try {
  define user = expect fetchUser(1) # automatically unwrapped in a try/else block
  print(user.name)
} else err {
  print(err)
}

###
Strings
###

define name: string = "Ted"
define chars: [string] = list from name # ["T", "e", "d"]

### 
Async/Await
BS uses `eventual` and `expect`/`await`
`expect` is used for `eventual` functions that return a Result
`await` is used for `eventual` functions that don't return a Result
###
define eventual main = (): nothing {
  define response = expect fetchData("https://example.com") # eventual function returning a `Result`

  given response {
    Ok { data } {
      print("Success: #{data}")
    }
    Error { error } {
      print("Failed: #{error}")
    }
  }
}

# For async functions with no return
define eventual delay = (ms: number): nothing {
  # pause for `ms`
}
await delay(1000)

# returns a `Result` with a Response `Ok` or a string `Error`
define eventual fetchData = (url: string): Result of (Response, string) {
  # body
}

# Built-in `Response` type
define Response = {
  ok: bool,
  status: number,
  headers: {?},
  json: async (): Result of ({?}, string),
  text: async (): Result of (string, string)
}

# Provide stdlib helpers to wrap a lot of API patterns

###
Loop Comprehension
###

define numbers: [number] = [1, 2, 3, 4, 5, 6]
define evenSquares: [number] = each num in numbers where num mod 2 equals 0 do num * num
# evenSquares = [4, 16, 36]

define whatever: [number] = each num in numbers
  where num mod 2 equals 0 or num mod 3 equals 0 # if `num` / 2 or `num` / 3 has no remainder...
  and where num > 2 # and `num` > 2
  do num * num # then square `num`
# whatever = []